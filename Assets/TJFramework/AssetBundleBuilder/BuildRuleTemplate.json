{
    "说明": [
        "打包规则默认以不冗余打包的情况下, 最大粒度, 独立文件打包. 同时也可以约定独立文件合并到一个包里.",
        "文件名区分大小写, 文件分隔符一律使用'/'",
        "生成的assetbundle的路径和名字一律会被自动转换为小写字符",
        "directory string: 搜索目录",
        "patterns string[]: 文件名模式匹配, 数组, 至少填一个. 匹配字符串规则可以参考Directory.GetFiles函数说明",
        "recursion bool: (可选) 搜索是否递归目录",
        "bundle string: (可选) 生成的AssetBundle的名字, 必须为小写, '.ab'结尾. 设置, 则匹配出来的文件统一放入这个包, 包可重名. 没设置, 为独立打包, '文件名.ab'",
        "dummy bool: (可选) 必须同时设置bundle. true, 表示不导出文件, 而是所有匹配出来的文件(包括引用)和这个规则匹配规则的一致, 则修改为指定bundle. 主要用于公共资源的打包",
        "后面的规则会覆盖前面的规则",
        "dummy为true的规则强制比为false的规则后处理",
        "建议:",
        "  只导出会直接使用到的资源",
        "  合包规则得同时考虑游戏更新的大小, 一般来说不建议太大, 最大建议在1到4MB, 当然如果以后热更新能比较好的实现差分更新, 可以打破这个规则, 再修改",
        "  对于琐碎的细小资源, 建议合包",
        "  对于一起读取, 且不大的资源建议合包",
        "  对于常驻内存且不大的资源建议合包",
        "  对于常驻内存且不常求改资源建议合包",
        "  对于公共被依赖资源合包需求, 但是又不需要知道具体导出的被依赖资源, 可以设置dummy为true约束"
    ],

    "rules": [
        {"directory": "Assets/TJTest/Scene", "patterns": ["*.unity"]},
        {"directory": "Assets/TJTest", "patterns": ["*.prefab"], "recursion": true, "bundle": null, "dummy": false},
        {"directory": "Assets/TJTest/lua", "patterns": ["*.txt"], "recursion": true, "bundle": "lua.ab"},
        {"directory": "Assets/TJTest/Materials", "patterns": ["upgrade.png"]},
        {"directory": "Assets/TJTest/Materials", "patterns": ["*.*"], "recursion": true, "bundle": "sha.ab", "dummy": true}
    ]
}
